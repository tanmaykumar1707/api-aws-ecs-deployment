name: Deploy ECS Service

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true


env:
  ECR_REGISTRY: 741448954606.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: testing/ecs-api-deployment
  AWS_REGION: ap-south-1
  ECS_CLUSTER_NAME: aad-fis-agent-cluster
  ECS_SERVICE_NAME: aad-fis-agent-api-service
  ECS_CONTAINER_NAME: aad-task-container
  ECS_TASK_DEFINITION: aad-fis-agent-api-task
  ALB_NAME: aad-fis-agent-alb



jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1

      - name: Check if image exists in ECR
        run: |
          IMAGE_TAG=${{ github.event.inputs.image_tag }}
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          if ! aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=$IMAGE_TAG > /dev/null 2>&1; then
            echo "Image not found: $IMAGE_URI"
            exit 1
          fi
          echo "Found image: $IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

#      - name: Updating ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ env.ECS_TASK_DEFINITION }}
#          container-name: ${{ env.ECS_CONTAINER_NAME }}
#          image: ${{ env.IMAGE_URI }}
#
#      - name: Deploy ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE_NAME }}
#          cluster: ${{ env.ECS_CLUSTER_NAME }}
#          wait-for-service-stability: true


      - name: Register new ECS task definition revision
        id: task-def
        run: |
                NEW_TASK_DEF=$(aws ecs register-task-definition \
                  --family $ECS_TASK_DEFINITION \
                  --container-definitions "$(aws ecs describe-task-definition \
                       --task-definition $ECS_TASK_DEFINITION \
                       --query 'taskDefinition.containerDefinitions' \
                       | jq --arg IMAGE "$IMAGE_URI" '.[] | .image=$IMAGE | [.]')")
                
                TASK_DEF_REVISION=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')
                echo "NEW_TASK_DEF=$TASK_DEF_REVISION" >> $GITHUB_ENV


      - name: Update ECS service to use new task definition
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --task-definition $NEW_TASK_DEF \
            --force-new-deployment

      - name: Wait for ECS service stability
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER_NAME \
            --services $ECS_SERVICE_NAME


      - name: Get ALB DNS
        id: alb-dns
        run: |
          DNS_NAME=$(aws elbv2 describe-load-balancers \
            --names "${{ env.ALB_NAME }}" \
            --query "LoadBalancers[0].DNSName" \
            --output text)
          echo "DNS_NAME=$DNS_NAME" >> $GITHUB_ENV
          echo "dns_name=$DNS_NAME" >> $GITHUB_OUTPUT

      - name: Add ALB DNS to workflow summary
        run: |
          echo "### Application URL" >> $GITHUB_STEP_SUMMARY
          echo "ALB DNS: ${{ steps.alb-dns.outputs.dns_name }}" >> $GITHUB_STEP_SUMMARY
